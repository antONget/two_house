from aiogram import F, Router, Bot

from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, default_state, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove
from handlers import registration_handlers as hrh
from filter.user_filter import validate_russian_phone_number
from handlers.registration_handlers import process_aristarch
from filter.user_filter import IsChatPrivate


import keyboards.keyboards as kb
import database.requests as rq


router = Router()
router.message.filter(IsChatPrivate())
storage = MemoryStorage()

import logging

class SetProfileFSM(StatesGroup):
    state_set_phone = State()
    state_set_auto1 = State()
    state_set_auto2 = State()
    state_set_fullname = State()

class ChangeGuideNewsFSM(StatesGroup):
    state_set_guide = State()
    state_set_news = State()

class SearchFlatAutoFSM(StatesGroup):
    state_search_flat = State()
    state_search_auto = State()


@router.message(F.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def my_profile(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'
    :param message:
    :param state:
    :return:
    """
    logging.info(f'my_profile')
    if not await rq.get_one_user(tg_id=message.chat.id):
        await hrh.process_start_command(message=message, state=state, bot=bot)
        return
    data = await rq.get_one_user(tg_id=message.chat.id)
    await message.answer(text=
                         f"‚Ññ –¥–æ–º–∞ - {data['house'] if data['house'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                         f"‚Ññ –ø–æ–¥—ä–µ–∑–¥–∞ - {data['doorway'] if data['doorway'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                         f"‚Ññ —ç—Ç–∞–∂–∞ - {data['stage'] if data['stage'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                         f"‚Ññ –∫–≤–∞—Ä—Ç–∏—Ä—ã - {data['flat'] if data['flat'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                         f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {data['username'] if data['username'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                         f"–§–ò–û - {data['fullname'] if data['fullname'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                         f"–¢–µ–ª–µ—Ñ–æ–Ω - {data['phone'] if data['phone'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                         f"1 –ê–≤—Ç–æ–º–æ–±–∏–ª—å - {data['auto1'] if data['auto1'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                         f"2 –ê–≤—Ç–æ–º–æ–±–∏–ª—å - {data['auto2'] if data['auto2'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n",
                         reply_markup=kb.kb_inline_set_my_profile()
                         )

@router.callback_query(F.data.startswith('set_'))
async def process_set_state_to_add_someone(clb: CallbackQuery, state: FSMContext):
    logging.info(f'process_set_state_to_add_someone')
    clb_name = clb.data.split('_')[-1]
    if clb_name == 'phone':
        logging.info(f"process_set_state_to_add_someone --- if clb_name == 'phone':")
        await state.set_state(SetProfileFSM.state_set_phone)
        logging.info(f"process_set_state_to_add_someone --- if clb_name == 'phone': --- AFTER set state")
        await clb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–æ–π –≤–Ω–∏–∑—É üëá',
                                 reply_markup=kb.kb_phone())
        await clb.answer()
        logging.info(f"process_set_state_to_add_someone --- if clb_name == 'phone': --- AFTER set state --- after keyboard")
    elif clb_name == 'auto1':
        logging.info(f"process_set_state_to_add_someone --- if clb_name == 'auto1':")
        await state.set_state(SetProfileFSM.state_set_auto1)
        await clb.message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–Ω–∞–∫ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ')
        await clb.answer()
    elif clb_name == 'auto2':
        logging.info(f"process_set_state_to_add_someone --- if clb_name == 'auto2':")
        await state.set_state(SetProfileFSM.state_set_auto2)
        await clb.message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–Ω–∞–∫ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ')
        await clb.answer()
    elif clb_name == 'fullname':
        logging.info(f"process_set_state_to_add_someone --- if clb_name == 'fullname':")
        await state.set_state(SetProfileFSM.state_set_fullname)
        await clb.message.answer(text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–∞–º–∏–ª–∏—é, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ')
        await clb.answer()


@router.message(SetProfileFSM.state_set_phone)
async def process_add_phone(message: Message, state: FSMContext, bot: Bot):
    logging.info(f'process_add_phone')

    # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—Å—è"
    if message.contact:
        logging.info(f'process_add_phone --- if message.contact:')
        phone = str(message.contact.phone_number)
        logging.info(f'process_add_phone --- if message.contact: --- phone = {phone}')
    # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    else:
        phone = message.text
        logging.info(f'process_add_phone --- else: phone = message.text = {phone}')
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if not validate_russian_phone_number(phone):
            await message.answer(text=f"–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã "
                                 f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: +79441234567)\n\n"
                                 f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–æ–π –≤–Ω–∏–∑—É üëá")#,reply_markup=kb.kb_phone())
            return




    await rq.set_data_to_profile(tg_id=message.chat.id, name_column='phone', current_value=phone)
    await message.answer(text='–ë–ª–∞–≥–æ–¥–∞—Ä—é!', reply_markup=kb.kb_aristarch())
    await state.clear()
    await state.set_state(state=None)
    await my_profile(message=message, state=state, bot=bot)

@router.message(SetProfileFSM.state_set_auto1)
async def process_add_auto1(message: Message, state: FSMContext, bot: Bot):
    logging.info(f'process_add_auto1 --- await state.get_state() = {await state.get_state()}')
    await rq.set_data_to_profile(tg_id=message.chat.id, name_column='auto1', current_value=message.text)
    await state.clear()
    await message.answer(text='–ë–ª–∞–≥–æ–¥–∞—Ä—é!', reply_markup=kb.kb_aristarch())
    await my_profile(message=message, state=state, bot=bot)
    await state.set_state(state=None)

@router.message(SetProfileFSM.state_set_auto2)
async def process_add_auto2(message: Message, state: FSMContext, bot: Bot):
    logging.info(f'process_add_auto2')
    await rq.set_data_to_profile(tg_id=message.chat.id, name_column='auto2', current_value=message.text)
    await state.clear()
    await message.answer(text='–ë–ª–∞–≥–æ–¥–∞—Ä—é!', reply_markup=kb.kb_aristarch())
    await my_profile(message=message, state=state, bot=bot)
    await state.set_state(state=None)

@router.message(SetProfileFSM.state_set_fullname)
async def process_add_fullname(message: Message, state: FSMContext, bot: Bot):
    logging.info(f'process_add_fullname')
    await rq.set_data_to_profile(tg_id=message.chat.id, name_column='fullname', current_value=message.text)
    await state.clear()
    await message.answer(text='–ë–ª–∞–≥–æ–¥–∞—Ä—é!', reply_markup=kb.kb_aristarch())
    await my_profile(message=message, state=state, bot=bot)
    await state.set_state(state=None)


@router.message(lambda message: message.text in ['–ù–æ–≤–æ—Å—Ç–∏', '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫'])
async def process_show_guide_news(message: Message, bot: Bot, state: FSMContext):
    logging.info(f'process_show_guide_news')
    if not await rq.get_one_user(tg_id=message.chat.id):
        await hrh.process_start_command(message=message, state=state, bot=bot)
        return
    id_group = await rq.get_id_group()
    user_channel_status = await bot.get_chat_member(chat_id=id_group, user_id=message.from_user.id)
    if user_channel_status.status == 'left':
        data_guide = await rq.get_guide_news(1)
        data_news = await rq.get_guide_news(2)
        logging.info(f"data_guide = {data_guide} --- data_news = {data_news} --- message.chat.id = {message.chat.id}")
        if not data_guide or not data_news:
            await message.answer(text='–í —Ä–∞–∑–¥–µ–ª–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
            return
        if message.text == '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫':
            if data_guide['photo']:
                if data_guide['text']:# –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏ —Ç–µ–∫—Å—Ç
                    await bot.send_photo(chat_id=message.chat.id, photo=data_guide['photo'], caption=data_guide['text'])
                else: # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
                    await bot.send_photo(chat_id=message.chat.id, photo=data_guide['photo'])
            else:
                if data_guide ['text']: # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await message.answer(text=data_guide['text'])
                else: # –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ
                    await message.answer(text='–í —Ä–∞–∑–¥–µ–ª–µ "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫" –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')


        if message.text == '–ù–æ–≤–æ—Å—Ç–∏':
            if data_news['photo']:
                if data_news['text']:# –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏ —Ç–µ–∫—Å—Ç
                    await bot.send_photo(chat_id=message.chat.id, photo=data_news['photo'], caption=data_news['text'])
                else: # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
                    await bot.send_photo(chat_id=message.chat.id, photo=data_news['photo'])
            else:
                if data_news ['text']: # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await message.answer(text=data_news['text'])
                else: # –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ
                    await message.answer(text='–í —Ä–∞–∑–¥–µ–ª–µ "–ù–æ–≤–æ—Å—Ç–∏" –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')

    # id_group = await rq.get_id_group()
    # user_channel_status = await bot.get_chat_member(chat_id=id_group, user_id=message.from_user.id)
    #
    # logging.info(f"user_channel_status.status = {user_channel_status.status}")
    # # –ü—Ä–æ–≤–µ—Ä–∏–ª —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å - 'member'
    # if user_channel_status.status != 'left':
    else:
        if message.text == '–ù–æ–≤–æ—Å—Ç–∏':
            await message.answer(text='–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ?', reply_markup=kb.kb_inline_yes_no(line_name='news'))

        elif message.text == '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫':
            await message.answer(text='–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ?', reply_markup=kb.kb_inline_yes_no(line_name='guide'))

    # else:
    #     await message.answer(text='–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
    #     await process_aristarch(message=message, state=state, bot=bot)




# –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –ù–ï–¢ –≤ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–µ –¥–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
@router.callback_query(F.data.startswith('no_'))
async def process_no_change_guide_or_news_go_to_aristarch(clb: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'process_no_change_guide_or_news_go_to_aristarch')
    await process_aristarch(message=clb.message, state=state, bot=bot)


# –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –î–ê –≤ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
@router.callback_query(F.data.startswith('yes_'))
async def process_yes_change_guide_or_news(clb: CallbackQuery, state: FSMContext):
    logging.info(f'process_yes_change_guide_or_news')
    # –∏–∑ –∫–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏—à–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –î–ê: –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π = _news –∏–ª–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ = _guide
    clb_button = clb.data.split('_')[-1]
    if clb_button == 'guide':
        await state.set_state(ChangeGuideNewsFSM.state_set_guide)
    elif clb_button == 'news':
        await state.set_state(ChangeGuideNewsFSM.state_set_news)
    await clb.message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞')
    await clb.answer()



# –ª–æ–≤–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
@router.message(ChangeGuideNewsFSM.state_set_news)
@router.message(ChangeGuideNewsFSM.state_set_guide)
async def process_capture_change_guide_news(message: Message, bot: Bot, state: FSMContext):
    logging.info(f'process_capture_change_guide_news')

    # –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –∞–ø–¥–µ–π—Ç–∞ —Ç–∏–ø–∞ message
    #print(message.model_dump_json(indent=4, exclude_none=True))

    logging.info(f"process_capture_change_guide_news --- \n"
                 f"--- message.text {message.text if message.text else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'} ---  \n"
                 f"--- message.photo[-1].file_id = {message.photo[-1].file_id if message.photo else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'} --- \n"
                 f"--- caption = {message.caption if message.caption else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}"
                 f"state = {await state.get_state()}")

    id_table_guide_news: int = 0
    if await state.get_state() == ChangeGuideNewsFSM.state_set_guide:
        id_table_guide_news = 1
    elif await state.get_state() == ChangeGuideNewsFSM.state_set_news:
        id_table_guide_news = 2

    # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    if message.text and not message.photo:
        text = message.text
        await rq.set_change_guide_news(id=id_table_guide_news, name_column='text', current_value=text)
        await rq.set_change_guide_news(id=id_table_guide_news, name_column='photo', current_value='')

    # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
    elif message.photo and not message.text:
        photo = message.photo[-1].file_id
        await rq.set_change_guide_news(id=id_table_guide_news, name_column='photo', current_value=photo)
        await rq.set_change_guide_news(id=id_table_guide_news, name_column='text', current_value='')

    # –µ—Å–ª–∏ –∏ —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ
    elif message.photo and message.text:
        photo = message.photo[-1].file_id
        text = message.text
        await rq.set_change_guide_news(id=id_table_guide_news, name_column='photo', current_value=photo)
        await rq.set_change_guide_news(id=id_table_guide_news, name_column='text', current_value=text)

    await message.answer(text='–ö–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω')
    await state.clear()
    await process_aristarch(message=message, state=state, bot=bot)




@router.message(F.text == '–ü–æ–∏—Å–∫')
async def process_search(message: Message, bot: Bot, state: FSMContext):
    logging.info(f'process_search')
    if not await rq.get_one_user(tg_id=message.chat.id):
        await hrh.process_start_command(message=message, state=state, bot=bot)
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    id_group = await rq.get_id_group()
    user_channel_status = await bot.get_chat_member(chat_id=id_group, user_id=message.from_user.id) #message.chat.id

    logging.info(f"user_channel_status.status = {user_channel_status.status}")
    # –ü—Ä–æ–≤–µ—Ä–∏–ª —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å - 'member'
    if user_channel_status.status != 'left':
        await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–ª–∏ –∞–≤—Ç–æ –¥–ª—è –ø–æ–∏–∫–∞',
                             reply_markup=kb.kb_inline_search())
    else:
        await message.answer(text='–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')


@router.callback_query(F.data.startswith('search_'))
async def process_push_clb_flat_or_auto(clb: CallbackQuery, state: FSMContext):
    logging.info(f'process_push_clb_flat_or_auto --- clb.data = {clb.data}')
    clb_button = clb.data.split('_')[-1]
    if clb_button == 'flat':
        await state.set_state(SearchFlatAutoFSM.state_search_flat)
        await clb.message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã')
        await clb.answer()

    elif clb_button == 'auto':
        await state.set_state(SearchFlatAutoFSM.state_search_auto)
        await clb.message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –ì–†–ó –∞–≤—Ç–æ')
        await clb.answer()


@router.message(SearchFlatAutoFSM.state_search_flat)
@router.message(SearchFlatAutoFSM.state_search_auto)
async def process_answer_to_search(message: Message, bot: Bot, state: FSMContext):
    logging.info(f'process_capture_change_guide_news')
    list_id_user_flat = [[user.tg_id, user.flat] for user in await rq.get_users()]
    list_id_auto = [[user.tg_id, user.auto1, user.auto2] for user in await rq.get_users()]


    input_data = message.text
    flag = True
    if await state.get_state() == SearchFlatAutoFSM.state_search_flat:
        for item in list_id_user_flat:
            if int(input_data) == item[1]:
                flag = False
                data = await rq.get_one_user(item[0])
                logging.info(f'data = {data}')
                await message.answer(text=
                             f"‚Ññ –¥–æ–º–∞ - {data['house'] if data['house'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"‚Ññ –ø–æ–¥—ä–µ–∑–¥–∞ - {data['doorway'] if data['doorway'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"‚Ññ —ç—Ç–∞–∂–∞ - {data['stage'] if data['stage'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"‚Ññ –∫–≤–∞—Ä—Ç–∏—Ä—ã - {data['flat'] if data['flat'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {data['username'] if data['username'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"–§–ò–û - {data['fullname'] if data['fullname'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"–¢–µ–ª–µ—Ñ–æ–Ω - {data['phone'] if data['phone'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"1 –ê–≤—Ç–æ–º–æ–±–∏–ª—å - {data['auto1'] if data['auto1'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"2 –ê–≤—Ç–æ–º–æ–±–∏–ª—å - {data['auto2'] if data['auto2'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n",
                             reply_markup=kb.kb_inline_set_my_profile()
                             )
        if flag:
            await message.answer(text='–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')

    elif await state.get_state() == SearchFlatAutoFSM.state_search_auto:
        for item in list_id_auto:
            if input_data == item[1] or input_data == item[2]:
                flag = False
                data = await rq.get_one_user(tg_id=item[0])
                logging.info(f'data = {data}')
                await message.answer(text=
                             f"‚Ññ –¥–æ–º–∞ - {data['house'] if data['house'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"‚Ññ –ø–æ–¥—ä–µ–∑–¥–∞ - {data['doorway'] if data['doorway'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"‚Ññ —ç—Ç–∞–∂–∞ - {data['stage'] if data['stage'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"‚Ññ –∫–≤–∞—Ä—Ç–∏—Ä—ã - {data['flat'] if data['flat'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {data['username'] if data['username'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"–§–ò–û - {data['fullname'] if data['fullname'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"–¢–µ–ª–µ—Ñ–æ–Ω - {data['phone'] if data['phone'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"1 –ê–≤—Ç–æ–º–æ–±–∏–ª—å - {data['auto1'] if data['auto1'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                             f"2 –ê–≤—Ç–æ–º–æ–±–∏–ª—å - {data['auto2'] if data['auto2'] else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n",
                             reply_markup=kb.kb_inline_set_my_profile()
                             )
        if flag:
            await message.answer(text='–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    await state.set_state(state=None)